[build-system]


{%- if license == "BSD" %}

{%- elif license == "Apache" %}

{%- elif license == "MIT" %}

{%- elif license == "GPL" %}

{%- endif %}
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"
license = "BSD-3-Clause"
license = "Apache-2.0"
license = "MIT"
license = "GPL-3.0-or-later"
description = "{{ project_short_description }}"
readme = "README.md"

classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Scientific/Engineering",
{% if typing != "no_typing" -%}
  "Typing :: Typed",
{%- endif %}
]

[project]
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
{%- if license == "BSD" %}
  "License :: OSI Approved :: BSD License",
{%- elif license == "Apache" %}
  "License :: OSI Approved :: Apache Software License",
{%- elif license == "MIT" %}
  "License :: OSI Approved :: MIT License",
{%- elif license == "GPL" %}
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
{%- endif %}
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
{%- if typing != "no_typing" %}
  "Typing :: Typed",
{%- endif %}
]name = "{{ project_name }}"
version = "0.1.0"
authors = [{ name = "{{ full_name }}", email = "{{ email }}" }]
description = "{{ project_short_description }}"
readme = "README.md"
requires-python = ">={{ min_python_version }}"
dependencies = []

[project.optional-dependencies]
test = ["pytest >=6", "pytest-cov >=3"]
dev = ["pytest >=6", "pytest-cov >=3"]

[project.urls]
Homepage = "{{ url }}"
"Bug Tracker" = "{{ url }}/issues"
Discussions = "{{ url }}/discussions"
Changelog = "{{ url }}/releases"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]
log_cli_level = "INFO"
testpaths = ["tests"]

[tool.coverage]


{% if typing != "no_typing" -%}
run.source = ["{{ python_name }}"]
port.exclude_lines = ['pragma: no cover', '\.\.\.', 'if typing.TYPE_CHECKING:']
[tool.mypy]

{% if typing == "loose" -%}

{% elif typing == "strict" -%}
files = ["src", "tests"]
python_version = "{{ min_python_version }}"
show_error_codes = true
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
strict = false
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[[tool.mypy.overrides]]

{%- endif %}
{%- endif %}

module = "{{ python_name }}.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true
[tool.ruff]
src = ["src"]
exclude = []
line-length = 88 # how long you want lines to be

[tool.ruff.format]
docstring-code-format = true # code snippets in docstrings will be formatted

[tool.ruff.lint]

{% if typing != "no_typing" -%}

{%- endif %}
select = [
    "E",
    "F",
    "W",   # flake8
    "B",   # flake8-bugbear
    "I",   # isort
    "ARG", # flake8-unused-arguments
    "C4",  # flake8-comprehensions
    "EM",  # flake8-errmsg
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "G",   # flake8-logging-format
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "RUF", # Ruff-specific
    "SIM", # flake8-simplify
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "EXE", # flake8-executable
]
ignore = [
    "PLR",    # Design related pylint codes
    "ISC001", # Conflicts with formatter
]
unfixable = [
    "F401", # Would remove unused imports
    "F841", # Would remove unused variables
]
flake8-unused-arguments.ignore-variadic-names = true # allow unused *args/**kwargs
isort.required-imports = ["from __future__ import annotations"]
